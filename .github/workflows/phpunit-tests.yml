name: PHPUnit Tests

# Since Unit Tests are required to pass for each PR,
# we cannot disable them for documentation-only changes.
on:
    pull_request:
    push:
        branches:
            - trunk
            - 'release/**'
            - 'wp/**'
    # Allow manually triggering the workflow.
    workflow_dispatch:

# Cancels all previous workflow runs for pull requests that have not completed.
concurrency:
    # The concurrency group contains the workflow name and the branch name for pull requests
    # or the commit hash for any other events.
    group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
    cancel-in-progress: true

jobs:
    compute-previous-wordpress-version:
        name: Compute previous WordPress version
        runs-on: ubuntu-latest
        outputs:
            previous-wordpress-version: ${{ steps.get-previous-wordpress-version.outputs.previous-wordpress-version }}

        steps:
            - name: Get previous WordPress version
              id: get-previous-wordpress-version
              run: |
                  curl \
                    -H "Accept: application/json" \
                    -o versions.json \
                    "http://api.wordpress.org/core/stable-check/1.0/"
                  LATEST_WP_VERSION=$(jq --raw-output 'with_entries(select(.value=="latest"))|keys[]' versions.json)
                  IFS='.' read LATEST_WP_MAJOR LATEST_WP_MINOR LATEST_WP_PATCH <<< "${LATEST_WP_VERSION}"
                  if [[ ${LATEST_WP_MINOR} == "0" ]]; then
                    PREVIOUS_WP_SERIES="$((LATEST_WP_MAJOR - 1)).9"
                  else
                    PREVIOUS_WP_SERIES="${LATEST_WP_MAJOR}.$((LATEST_WP_MINOR - 1))"
                  fi
                  PREVIOUS_WP_VERSION=$(jq --raw-output --arg series "${PREVIOUS_WP_SERIES}" 'with_entries(select(.key|startswith($series)))|keys[-1]' versions.json)
                  echo "previous-wordpress-version=${PREVIOUS_WP_VERSION}" >> $GITHUB_OUTPUT
                  rm versions.json

    test-php:
        name: PHP ${{ matrix.php }}${{ matrix.multisite && ' multisite' || '' }}${{ matrix.wordpress != '' && format( ' (WP {0}) ', matrix.wordpress ) || '' }} on ubuntu-latest
        needs: compute-previous-wordpress-version
        runs-on: ubuntu-latest
        timeout-minutes: 20
        if: ${{ github.repository == 'WordPress/gutenberg' || github.event_name == 'pull_request' }}
        strategy:
            fail-fast: true
            matrix:
                php:
                    - '5.6'
                    - '7.0'
                    - '7.1'
                    - '7.2'
                    - '7.3'
                    - '7.4'
                    - '8.0'
                    - '8.1'
                    - '8.2'
                multisite: [false, true]
                wordpress: [''] # Latest WordPress version.
                include:
                    # Test with the previous WP version.
                    - php: '5.6'
                      wordpress: ${{ needs.compute-previous-wordpress-version.outputs.previous-wordpress-version }}
                    - php: '7.4'
                      wordpress: ${{ needs.compute-previous-wordpress-version.outputs.previous-wordpress-version }}
                    - php: '8.2'
                      wordpress: ${{ needs.compute-previous-wordpress-version.outputs.previous-wordpress-version }}

        env:
            WP_ENV_PHP_VERSION: ${{ matrix.php }}
            WP_ENV_CORE: ${{ matrix.wordpress == '' && 'WordPress/WordPress' || format( 'https://wordpress.org/wordpress-{0}.zip', matrix.wordpress ) }}

        steps:
            - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

            - name: Set up Node.js
              uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c # v3.6.0
              with:
                  node-version-file: '.nvmrc'
                  cache: npm

            ##
            # This allows Composer dependencies to be installed using a single step.
            #
            # Since the tests are currently run within the Docker containers where the PHP version varies,
            # the same PHP version needs to be configured for the action runner machine so that the correct
            # dependency versions are installed and cached.
            ##
            - name: Set up PHP
              uses: shivammathur/setup-php@d30ad8b1843ace22e6698ab99bbafaa747b6bd0d # v2.24.0
              with:
                  php-version: '${{ matrix.php }}'
                  ini-file: development
                  coverage: none

            # Ensure that Composer installs the correct versions of packages.
            - name: Override PHP version in composer.json
              run: composer config platform.php ${{ matrix.php }}

            # The spatie/phpunit-watcher package is not compatible with PHP < 7.2.
            # It must be removed before running the tests.
            - name: Remove incompatible Composer packages
              if: ${{ matrix.php < '7.2' }}
              run: composer remove spatie/phpunit-watcher --dev --no-update

            # Since Composer dependencies are installed using `composer update` and no lock file is in version control,
            # passing a custom cache suffix ensures that the cache is flushed at least once per week.
            - name: Install Composer dependencies
              uses: ramsey/composer-install@83af392bf5f031813d25e6fe4cd626cdba9a2df6 # v2.2.0
              with:
                  custom-cache-suffix: $(/bin/date -u --date='last Mon' "+%F")

            - name: Install npm dependencies
              run: |
                  npm ci
                  npm run build

            - name: Docker debug information
              run: |
                  docker -v
                  docker-compose -v

            - name: General debug information
              run: |
                  npm --version
                  node --version
                  curl --version
                  git --version
                  svn --version
                  locale -a

            - name: Start Docker environment
              run: npm run wp-env start

            - name: Log running Docker containers
              run: docker ps -a

            - name: Docker container debug information
              run: |
                  npm run wp-env run tests-mysql "mysql --version"
                  npm run wp-env run tests-wordpress "php --version"
                  npm run wp-env run tests-wordpress "php -m"
                  npm run wp-env run tests-wordpress "php -i"
                  npm run wp-env run tests-wordpress "/var/www/html/wp-content/plugins/gutenberg/vendor/bin/phpunit --version"
                  npm run wp-env run tests-wordpress "locale -a"

            - name: Running single site unit tests
              if: ${{ ! matrix.multisite }}
              run: npm run test:unit:php

            - name: Running multisite unit tests
              if: ${{ matrix.multisite }}
              run: npm run test:unit:php:multisite
