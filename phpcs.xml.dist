<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="WordPress Coding Standards for Gutenberg Plugin" xsi:noNamespaceSchemaLocation="./vendor/squizlabs/php_codesniffer/phpcs.xsd">
	<description>Sniffs for WordPress plugins, with minor modifications for Gutenberg</description>

	<!--
	#############################################################################
	COMMAND LINE ARGUMENTS
	https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml
	#############################################################################
	-->

	<file>./bin</file>
	<file>./gutenberg.php</file>
	<file>./lib</file>
	<file>./packages</file>
	<file>./phpunit</file>
	<file>./post-content.php</file>

	<!-- Exclude generated files -->
	<exclude-pattern>./packages/block-serialization-spec-parser/parser.php</exclude-pattern>

	<!-- Only check PHP files. -->
	<arg name="extensions" value="php"/>

	<!-- Show progress, show the error codes for each message (source). -->
	<arg value="ps"/>

	<!-- Strip the filepaths down to the relevant bit. -->
	<arg name="basepath" value="./"/>

	<!-- Check up to 8 files simultaneously. -->
	<arg name="parallel" value="8"/>


	<!--
	#############################################################################
	USE VARIOUS PRE-DEFINED RULESETS
	#############################################################################
	-->

	<config name="testVersion" value="5.6-"/>
	<rule ref="PHPCompatibilityWP">
		<include-pattern>*\.php$</include-pattern>
	</rule>

	<rule ref="WordPress-Extra"/>
	<rule ref="WordPress-Docs"/>

	<rule ref="VariableAnalysis.CodeAnalysis.VariableAnalysis">
		<properties>
			<property name="allowUnusedParametersBeforeUsed" value="true"/>
		</properties>
	</rule>


	<!--
	#############################################################################
	SNIFF SPECIFIC CONFIGURATION
	See:
	* https://github.com/squizlabs/PHP_CodeSniffer/wiki/...
	* https://github.com/WordPress/WordPress-Coding-Standards/wiki/Customizable-sniff-properties
	#############################################################################
	-->

	<rule ref="PEAR.Functions.FunctionCallSignature">
		<properties>
			<property name="allowMultipleArguments" value="false"/>
		</properties>
	</rule>

	<config name="minimum_supported_wp_version" value="4.9"/>

	<!-- Verify that all gettext calls use the correct text domain. -->
	<rule ref="WordPress.WP.I18n">
		<properties>
			<property name="text_domain" type="array">
				<element value="gutenberg"/>
				<element value="default"/>
			</property>
		</properties>
	</rule>

	<rule ref="WordPress.NamingConventions.PrefixAllGlobals">
		<properties>
			<property name="prefixes" type="array">
				<element value="gutenberg"/>
			</property>
		</properties>
	</rule>


	<!--
	#############################################################################
	SELECTIVE EXCLUSIONS
	Exclude specific files for specific sniffs and/or exclude sub-groups in sniffs.
	#############################################################################
	-->

	<rule ref="WordPress.WP.I18n.MissingArgDomainDefault">
		<exclude-pattern>packages/block-library/src/*</exclude-pattern>
	</rule>

	<!-- These special comments are markers for the build process -->
	<rule ref="Squiz.Commenting.InlineComment.WrongStyle">
		<exclude-pattern>gutenberg.php</exclude-pattern>
	</rule>

	<!-- Do not require docblocks for unit tests -->
	<rule ref="Squiz.Commenting.FunctionComment.Missing">
		<exclude-pattern>phpunit/*</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.FileComment.Missing">
		<exclude-pattern>phpunit/*</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.ClassComment.Missing">
		<exclude-pattern>phpunit/*</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.ClassComment.SpacingAfter">
		<exclude-pattern>phpunit/*</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.FunctionComment.MissingParamTag">
		<exclude-pattern>phpunit/*</exclude-pattern>
	</rule>
	<rule ref="Generic.Commenting.DocComment.Empty">
		<exclude-pattern>phpunit/*</exclude-pattern>
	</rule>
	<rule ref="Generic.Commenting.DocComment.MissingShort">
		<exclude-pattern>phpunit/*</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.VariableComment.Missing">
		<exclude-pattern>phpunit/*</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.FunctionCommentThrowTag.Missing">
		<exclude-pattern>phpunit/*</exclude-pattern>
	</rule>

	<!-- Ignore snake case error in parser -->
	<rule ref="WordPress.NamingConventions.ValidVariableName.PropertyNotSnakeCase">
		<exclude-pattern>./packages/block-serialization-default-parser/parser.php</exclude-pattern>
	</rule>
	<rule ref="WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase">
		<exclude-pattern>./packages/block-serialization-default-parser/parser.php</exclude-pattern>
	</rule>
	<rule ref="WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase">
		<exclude-pattern>./packages/block-serialization-default-parser/parser.php</exclude-pattern>
	</rule>

	<!-- Ignore filename error since it requires WP core build process change -->
	<rule ref="WordPress.Files.FileName.InvalidClassFileName">
		<exclude-pattern>./packages/block-serialization-default-parser/parser.php</exclude-pattern>
		<exclude-pattern>/phpunit/*</exclude-pattern>
	</rule>

	<!-- Exclude PHPUnit tests from file and class name sniffs (for Core parity). -->
	<rule ref="WordPress.Files.FileName.NotHyphenatedLowercase">
		<exclude-pattern>/phpunit/*</exclude-pattern>
	</rule>
	<rule ref="PEAR.NamingConventions.ValidClassName.Invalid">
		<exclude-pattern>/phpunit/*</exclude-pattern>
	</rule>

</ruleset>
